#import "@local/typopts:0.0.4": options, states

#import "./theme.typ"
#import "./util.typ"

#import "./layout.typ": *
#import "./typo.typ": *
#import "./figures.typ": *
#import "./aufgaben.typ": *


#let __getOrDefault( var, key, default ) = {
	if key in var.named() { var.named().at(key) }
	else if key in var.pos() { var.pos().at(key) }
	else { default }
}


#let arbeitsblatt(
	..args,

	_init: none,

	body
) = {
	let fontsize = __getOrDefault(args, "fontsize", 12pt)

	// set document(
	// 	title: if "titel" in args.named() {args.named().titel},
	// 	author: if "autor" in args.named() {args.named().autor}
	// )

	// Configure page
	set page(
		..options.extract(args,
			paper: "a4",
			flipped: false,
		),
		header: kopfzeile(),
		footer: fusszeile()
	)
	// Configure text
  	set par(
		..options.extract(args, _prefix:"par",
			justify: true
		)
	)
	set text(
		font: __getOrDefault(args, "font", theme.fonts.default),
		size: __getOrDefault(args, "fontsize", 13pt),
		..options.extract(args, _prefix:"font",
			weight: 300,
			fallback: true,
			lang: "de",
			region: "DE",
			hyphenate: auto,
		)
	)
	// Configure headings
	show heading: set text(
		font: theme.fonts.headings,
		fill: theme.primary
	)
	// Lists
	set enum(
		numbering: "1)"
	)
	// Configure code blocks
	show raw: set text(
		font: theme.fonts.code,
		// size: __getOrDefault(args, "fontsize", 13pt)*0.88
		// size: 0.88em
	)
	show raw.where(block: false): set text(
		fill: theme.primary
	)
	// show raw.where(block: true): c => code(c)

	// Handle options (after setting up page with header / footer)
	options.saveparser("schule",
		..(
			"autor", "kuerzel", "titel",
			"reihe", "nummer", "fach",
			"kurs", "version"
		).map(options.arg)
	)
	options.extendparser("schule", options.arg(
		"datum",
		types: ("string", "datetime"),
		default: datetime.today(),
		code: v=>{
			if type(v) == "string" {
				let d = v.split(".")
				datetime(
					day:int(d.at(0)),
					month:int(d.at(1)),
					year:int(d.at(2))
				)
			}
		}
	))
	options.extendparser("schule", options.arg("typ", default:"Arbeitsblatt"))
	options.extendparser("schule", options.arg("fontsize", default:13pt, types:"length"))
	options.extendparser("schule", options.arg("loesungen", default:"sofort"))

	options.parseopts(args, "schule")

	// Subtype init
	if _init != none {
		for ini in (_init,).flatten() {
			ini()
		}
	}

	[
		<ab-start>
		#body
		#options.get("loesungen", v => {
			if v == "seite" { d_loesungen() }
		})
		<ab-end>
	]
}


#let derautor = options.display("autor")
#let daskuerzel = options.display("kuerzel")
#let dertitel = options.display("titel")
#let diereihe = options.display("reihe")
#let dienummer = options.display("nummer")
#let dasfach = options.display("fach")
#let derkurs = options.display("kurs")
#let dertyp = options.display("typ")
#let dasdatum = options.display("datum", format:dt=>if dt != none {dt.display("[day].[month].[year]")})
#let dieversion = options.display("version")


#let titleblock(
	rule: false,
  ..args,
  body
) = {
  v(-1em)
  block(below:0.65em, width:100%, ..args, {
    body
    if rule {
      move(dy: -.8em, line(length: 100%))
    }
  })
}
#let abtitel(
	titel: none,
	reihe: none,
  rule: false
) = titleblock({
	if titel == none { titel = dertitel }
	if reihe == none { reihe = diereihe }

	set align(center)
	if reihe != none {
		heading(level:3, text(theme.text.subject, smallcaps(reihe)))
	}
  move(dy:-0.4em,
    heading(level:1, text(theme.primary, smallcaps(titel)))
  )
  if rule {
    move(dy: -.8em, line(length: 100%))
  }
})

// #let anhang( body, ..args ) = page(
// 	header: kopfzeile(
// 		mitte: () => [Anhang]
// 	),
// 	..args.named(),
// )[
// 	= Anhang <anhang>
// 	#body

// 	// Fix for additional page generated by #page()
// 	#counter(page).update(p => p - 1)
// ]

#let anhang( body, ..args ) = [
	#set page(
		header: kopfzeile(
			mitte: () => [Anhang]
		),
		..args.named(),
	)
	= Anhang <anhang>
	#body

	// Fix for additional page generated by #page()
	// #counter(page).update(p => p - 1)
]
